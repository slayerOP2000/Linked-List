#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next = NULL;
    
    //constructor
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
    //deconstructor
    ~Node()
    {
        int value = this->data;
        if(this->next!=NULL)
        {
            delete next;
            this->next = NULL;
        }
        cout<<"Memory is free for node with data"<<value<<endl;
    }
};
void InsertAtHead(Node* &head,int data)
{
    Node* temp = new Node(data);
    temp->next = head;  
    head=temp;
}
void InsertAtTail(Node* &tail,int data)
{
    Node* temp = new Node(data);
    tail->next = temp;
    tail = tail->next;
}
void print(Node* &head)
{
    Node* temp = head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}
void InsertAtPosition(Node* &tail,Node* &head,int position,int data)
{
    if(position == 1)
    {
        InsertAtHead(head,data);
        return;
    }
    Node* temp = head;  
    int cnt = 1;
    while(cnt<position - 1)
    {
        temp =temp->next;
        cnt++;
    }
    if(temp->next == NULL)
    {
        InsertAtTail(tail,data);
        return;
    }
    Node* nodeToInsert = new Node(data);
    nodeToInsert->next = temp->next;
    temp->next = nodeToInsert;
}

void deleteNode(int position,Node* &head)
{
    if(position == 1)
    {
        Node* temp = head;
        head = head -> next;
        temp->next = NULL;
        delete temp;
    }
    else
    {
        Node* curr =head;
        Node* prev =NULL;
        int cnt = 1;
        while(cnt<position)
        {
            prev = curr;
            curr = curr->next;
            cnt++;
        }
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }
}
int main(){
Node* node1 = new Node(10);
//cout<<node1->data<<endl;
//cout<<node1->next<<endl;
Node* head = node1;
Node* tail = node1;
print(head);
InsertAtHead(head,12);
print(head);
InsertAtHead(head,15);
print(head);
InsertAtTail(tail,9);
print(head);
//InsertAtPosition(head,1,22);
//print(head);
deleteNode(2,head);
print(head);
return 0;
}
