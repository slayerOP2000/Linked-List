#include<vector>

class Solution{
    private:
    bool checkPalindrome(vector<int> arr)
    {
        int n = arr.size();
        int s = 0;
        int e = n-1;
        while(s<=e)
        {
            if(arr[s]!=arr[e])
                return 0;
            s++;
            e--;
        }
        return 1;
    }
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        vector<int> arr;
        
        Node* temp = head;
        while(temp!=NULL)
        {
            arr.push_back(temp->data);
            temp = temp->next;
        }
        return checkPalindrome(arr);
    }

};

//Approach 2.
class Solution {
    private:
        ListNode* getMid(ListNode* head)
        {
            ListNode* slow = head;
            ListNode* fast = head->next;
            while(fast!=NULL&&slow!=NULL)
            {
                fast = fast->next->next;
                slow = slow->next;
            }
            return slow;
        }
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* next = NULL;
        if(curr!=NULL)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL)
        {
            return true;
        }
        ListNode* middle = getMid(head);
        ListNode* temp = middle->next;
        middle->next = reverse(temp);
        ListNode* head1 = head;
        ListNode* head2 = middle->next;
        while(head2!=NULL)
        {
            if(head1 -> data != head2->data)
            {
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
            temp = middle->next;
            middle->next = reverse(temp);
        return true;
        
    }
};
